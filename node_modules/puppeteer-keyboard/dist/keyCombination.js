"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCombination = void 0;
const USKeyboardLayout_js_1 = require("puppeteer-core/lib/cjs/puppeteer/common/USKeyboardLayout.js");
class KeyCombination {
    /**
     * @param keyString Examples:
     * - [Enter]
     * - [Ctrl+Shift+A]
     * - ArrowLeft
     */
    constructor(page, keyString) {
        this.page = page;
        this.keys = keyString
            .replace(/[\[\]]/g, "")
            .replace("Ctrl", "Control") // some hack ;)
            .split("+")
            .map(e => e.trim());
        // validate
        for (const key of this.keys) {
            if (!this.isKeyboardKey(key)) {
                throw new Error(`Keys combination not recognized ${keyString}.
                Key code "${key}" not exist in USKeyboardLayout
                Available key codes are here: https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js`);
            }
        }
    }
    /**
     * Type key combination in currently focused element.
     */
    type() {
        return __awaiter(this, arguments, void 0, function* (delayMs = 0) {
            const keysToRelease = [];
            for (const key of this.keys) {
                yield this.page.keyboard.down(key);
                yield this.wait(delayMs);
                keysToRelease.unshift(key);
            }
            for (const key of keysToRelease) {
                yield this.page.keyboard.up(key);
                yield this.wait(delayMs);
            }
        });
    }
    isKeyboardKey(key) {
        return USKeyboardLayout_js_1._keyDefinitions[key] !== undefined;
    }
    wait(ms) {
        return ms > 0
            ? new Promise(res => setTimeout(res, ms))
            : null;
    }
}
exports.KeyCombination = KeyCombination;

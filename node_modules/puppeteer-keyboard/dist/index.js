"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Keyboard = void 0;
const keyCombination_1 = require("./keyCombination");
class Keyboard {
    constructor(page, options = { delay: 0 }) {
        this.page = page;
        this.options = options;
    }
    /**
     * @param text Text to type, examples:
     * - Some text
     * - Some text[Ctrl+A][Backspace]other text
     * - mark[Ctrl+Shift+ArrowLeft]
     * @param element Page element to be focused. If not set - text will be typed in currently focused element.
     */
    type(text_1) {
        return __awaiter(this, arguments, void 0, function* (text, element = null) {
            if (element && typeof element.focus === "function") {
                yield element.focus();
            }
            const parts = this.splitText(text);
            for (const part of parts) {
                this.isKeyCombination(part)
                    ? yield this.typeKeyCombination(part)
                    : yield this.typeText(part);
            }
        });
    }
    /**
     * Splits text to fragments, example:
     * "text[Shift]other[Ctrl+S]"
     * -> will split into array: ["text", "[Shift]", "other", "[Ctrl+S]" ]
     * @param text
     */
    splitText(text) {
        return text.match(/(?:\[.*?\]|[^\[\]]+)/g);
    }
    /**
     * Checks is string is in braces like: "[Something]"
     */
    isKeyCombination(text) {
        return /\[.*?\]/.test(text);
    }
    typeText(text) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.page.keyboard.type(text, this.options);
        });
    }
    typeKeyCombination(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const delay = this.options && this.options.delay && 0;
            yield new keyCombination_1.KeyCombination(this.page, text).type(delay);
        });
    }
}
exports.Keyboard = Keyboard;
